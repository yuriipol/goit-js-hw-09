{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAC9BC,EAAaH,EAAKE,cAAc,UAClBF,EAAKE,cAAc,WACrBF,EAAKE,cAAc,SAEzBE,OAAOD,EAAWE,OAmD9B,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUS,MAAAR,IAEpBG,EAAO,CAAEJ,WAAUS,MAAAR,MAEpBA,MA1DPR,EAAKiB,iBAAiB,UAEtB,SAAkBC,GAChBA,EAAMC,iBA6BN,IA5BA,IAEuBC,EAAnBF,EAAMG,cADRC,SAAYC,EAAKH,EAALJ,MAAOQ,EAAIJ,EAAJI,KAAMC,EAAML,EAANK,OAEvBC,EAAetB,OAAOmB,EAAMlB,OAyBvBsB,EAAI,EAAGA,GAAKvB,OAAOqB,EAAOpB,OAAQsB,GAAK,EAC9CrB,EAAcqB,EAAGD,GACdE,MAAK,SAAAC,G,IAAGtB,EAAQsB,EAARtB,SAAUuB,EAAKD,EAALb,MACjBe,EAAAjC,GAASkC,OAAOC,QACd,uBAAwCC,OAAf3B,EAAS,QAAY2B,OAANJ,EAAM,UAGjDK,OAAM,SAAAN,G,IAAGtB,EAAQsB,EAARtB,SAAU6B,EAAKP,EAALb,MAClBe,EAAAjC,GAASkC,OAAOK,QACd,sBAAqCH,OAAf3B,EAAS,QAAY2B,OAANE,EAAM,UAGjDV,GAAgBtB,OAAOoB,EAAKnB,OAE9Ba,EAAMG,cAAciB,W","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nconst inputDelay = form.querySelector('.delay');\nconst inputAmount = form.querySelector('.amount');\nconst inputStep = form.querySelector('.step');\n\nlet delay = Number(inputDelay.value);\n\nform.addEventListener('submit', onSubmit);\n\nfunction onSubmit(event) {\n  event.preventDefault();\n  const {\n    elements: { delay, step, amount },\n  } = event.currentTarget;\n  let promiseDelay = Number(delay.value);\n  // let count = 0;\n\n  // const intervalId = setInterval(function () {\n  //   count += 1;\n  //   console.log(Number(inputAmount.value));\n  //   if (count === Number(inputAmount.value)) {\n  //     clearInterval(intervalId);\n  //     return;\n  //   }\n\n  //   let position = count;\n\n  //   createPromise(position, delay)\n  //     .then(({ position, delay }) => {\n  //       Notiflix.Notify.success(\n  //         `✅ Fulfilled promise ${position} in ${delay}ms`\n  //       );\n  //     })\n  //     .catch(({ position, delay }) => {\n  //       Notiflix.Notify.failure(\n  //         `❌ Rejected promise ${position} in ${delay}ms`\n  //       );\n  //     });\n  // }, (delay += Number(inputStep.value)));\n  for (let i = 1; i <= Number(amount.value); i += 1) {\n    createPromise(i, promiseDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    promiseDelay += Number(step.value);\n  }\n  event.currentTarget.reset();\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$inputDelay","Number","value","$ce04d3a99e08e73b$var$createPromise","position","delay4","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","delay","addEventListener","event","preventDefault","_elements","currentTarget","elements","delay1","step","amount","promiseDelay","i","then","param","delay2","$parcel$interopDefault","Notify","success","concat","catch","delay3","failure","reset"],"version":3,"file":"03-promises.f00c14ee.js.map"}